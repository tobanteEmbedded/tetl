# SPDX-License-Identifier: BSL-1.0
# SPDX-FileCopyrightText: Copyright (C) 2020 Tobias Hienzsch
Checks:
  - -*

  - bugprone-*
  - -bugprone-casting-through-void
  - -bugprone-easily-swappable-parameters
  - -bugprone-exception-escape
  - -bugprone-forwarding-reference-overload
  - -bugprone-inc-dec-in-conditions
  - -bugprone-macro-parentheses
  - -bugprone-return-const-ref-from-parameter
  - -bugprone-signed-char-misuse
  - -bugprone-unhandled-self-assignment

  - -clang-analyzer-core.*
  - -clang-analyzer-cplusplus.PlacementNew

  - cert-*
  - -cert-err58-cpp
  - -cert-oop54-cpp
  - -cert-str34-c

  - concurrency-*

  - cppcoreguidelines-*
  - -cppcoreguidelines-avoid-const-or-ref-data-members
  - -cppcoreguidelines-avoid-non-const-global-variables
  - -cppcoreguidelines-c-copy-assignment-signature
  - -cppcoreguidelines-macro-to-enum
  - -cppcoreguidelines-macro-usage
  - -cppcoreguidelines-missing-std-forward
  - -cppcoreguidelines-noexcept-move-operations
  - -cppcoreguidelines-owning-memory
  - -cppcoreguidelines-pro-bounds-array-to-pointer-decay
  - -cppcoreguidelines-pro-bounds-avoid-unchecked-container-access
  - -cppcoreguidelines-pro-bounds-constant-array-index
  - -cppcoreguidelines-pro-bounds-pointer-arithmetic
  - -cppcoreguidelines-pro-type-const-cast
  - -cppcoreguidelines-pro-type-reinterpret-cast
  - -cppcoreguidelines-pro-type-union-access
  - -cppcoreguidelines-rvalue-reference-param-not-moved
  - -cppcoreguidelines-use-enum-class

  - hicpp-*
  - -hicpp-deprecated-headers
  - -hicpp-exception-baseclass
  - -hicpp-explicit-conversions
  - -hicpp-function-size
  - -hicpp-no-array-decay
  - -hicpp-no-assembler
  - -hicpp-noexcept-move
  - -hicpp-signed-bitwise

  - misc-*
  - -misc-const-correctness
  - -misc-include-cleaner
  - -misc-no-recursion
  - -misc-redundant-expression
  - -misc-unconventional-assign-operator
  - -misc-use-anonymous-namespace

  - modernize-*
  - -modernize-deprecated-headers
  - -modernize-use-ranges
  - -modernize-use-std-numbers
  - -modernize-use-std-print

  - performance-*
  - -performance-enum-size
  - -performance-no-int-to-ptr
  - -performance-noexcept-move-constructor

  - readability-*
  - readability-identifier-naming
  - -readability-avoid-nested-conditional-operator
  - -readability-container-size-empty
  - -readability-function-cognitive-complexity
  - -readability-function-size
  - -readability-identifier-length
  - -readability-math-missing-parentheses
  - -readability-qualified-auto
  - -readability-redundant-casting
  - -readability-suspicious-call-argument
  - -readability-use-concise-preprocessor-directives

  - -*-avoid-c-arrays
  - -*-magic-numbers
  - -*-member-init
  - -*-noexcept-destructor
  - -*-noexcept-swap
  - -*-non-private-member-variables-in-classes
  - -*-use-equals-default
  - -*-special-member-functions
  - -*-vararg

WarningsAsErrors: "*"
FormatStyle: file
HeaderFileExtensions: ["hpp"]
ImplementationFileExtensions: ["cpp"]
ExcludeHeaderFilterRegex: "(.*/include/etl/_3rd_party/*)"
CheckOptions:
  cppcoreguidelines-avoid-do-while.IgnoreMacros: true
  modernize-use-trailing-return-type.TransformLambdas: none
  readability-identifier-naming.LocalVariableCase: camelBack
  readability-identifier-naming.NamespaceCase: lower_case
  readability-identifier-naming.ParameterCase: camelBack
  readability-identifier-naming.PrivateMemberCase: camelBack
  readability-identifier-naming.PrivateMemberPrefix: _
  readability-identifier-naming.PrivateMemberSuffix: ""
  readability-identifier-naming.PublicMemberCase: lower_case
  readability-identifier-naming.PublicMemberIgnoredRegexp: ".*_NaN"
  readability-identifier-naming.PublicMethodCase: lower_case
  readability-identifier-naming.PublicMethodIgnoredRegexp: ".*_NaN"
  readability-identifier-naming.TemplateParameterCase: CamelCase
