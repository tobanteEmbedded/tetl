# SPDX-License-Identifier: BSL-1.0
# SPDX-FileCopyrightText: Copyright (C) 2019 Tobias Hienzsch
project(etl-tests)

add_library(tetl.etl-test-common INTERFACE)
target_include_directories(tetl.etl-test-common INTERFACE "${CMAKE_SOURCE_DIR}/tests")
target_compile_definitions(tetl.etl-test-common INTERFACE TETL_ENABLE_USER_CONFIG_HEADER_INCLUDE=1)
target_link_libraries(tetl.etl-test-common INTERFACE tetl::compiler_warnings)

if(TETL_BUILD_CXX_MODULES)
    tetl_add_module_target(tetl.etl-module-for-tests)
    target_link_libraries(tetl.etl-module-for-tests PUBLIC tetl.etl-test-common)
endif()

function(tetl_add_test _header _target)
    set(options OPTIONAL WILL_FAIL)
    cmake_parse_arguments(TETL_ADD_TEST_PREFIX "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

    set(target_name "test_${_header}_${_target}")

    add_executable("${target_name}" "${_target}.t.cpp")
    target_link_libraries("${target_name}" PRIVATE tetl.etl-test-common)

    if(TETL_BUILD_CONTRACT_CHECKS)
        target_compile_definitions("${target_name}" PRIVATE TETL_ENABLE_CONTRACT_CHECKS=1)
    endif()

    if(TETL_BUILD_CONTRACT_CHECKS_SAFE)
        target_compile_definitions("${target_name}" PRIVATE TETL_ENABLE_CONTRACT_CHECKS_SAFE=1)
    endif()

    if(TETL_BUILD_CXX_MODULES)
        target_link_libraries("${target_name}" PRIVATE tetl.etl-module-for-tests)
        target_compile_definitions("${target_name}" PRIVATE TETL_ENABLE_CXX_MODULES=1)
    else()
        target_link_libraries("${target_name}" PRIVATE tetl::etl)
        set_target_properties("${target_name}" PROPERTIES CXX_SCAN_FOR_MODULES FALSE)
    endif()

    add_test(NAME "${_header}.hpp: ${_target}" COMMAND "${target_name}")
    set_tests_properties("${_header}.hpp: ${_target}" PROPERTIES WILL_FAIL ${TETL_ADD_TEST_PREFIX_WILL_FAIL})
endfunction()

add_subdirectory("algorithm")
add_subdirectory("array")
add_subdirectory("bit")
add_subdirectory("bitset")
add_subdirectory("cassert")
add_subdirectory("cctype")
add_subdirectory("cfloat")
add_subdirectory("charconv")
add_subdirectory("chrono")
add_subdirectory("cmath")
add_subdirectory("complex")
add_subdirectory("concepts")
add_subdirectory("cstddef")
add_subdirectory("cstdint")
add_subdirectory("cstdlib")
add_subdirectory("cstring")
add_subdirectory("cwchar")
add_subdirectory("exception")
add_subdirectory("execution")
add_subdirectory("expected")
add_subdirectory("flat_set")
add_subdirectory("format")
add_subdirectory("functional")
add_subdirectory("inplace_vector")
add_subdirectory("iterator")
add_subdirectory("limits")
add_subdirectory("linalg")
add_subdirectory("mdarray")
add_subdirectory("mdspan")
add_subdirectory("memory")
add_subdirectory("mpl")
add_subdirectory("mutex")
add_subdirectory("numbers")
add_subdirectory("numeric")
add_subdirectory("optional")
add_subdirectory("random")
add_subdirectory("ranges")
add_subdirectory("ratio")
add_subdirectory("scope")
add_subdirectory("set")
add_subdirectory("span")
add_subdirectory("stack")
add_subdirectory("stdexcept")
add_subdirectory("string")
add_subdirectory("string_view")
add_subdirectory("strings")
add_subdirectory("system_error")
add_subdirectory("tuple")
add_subdirectory("type_traits")
add_subdirectory("utility")
add_subdirectory("variant")
add_subdirectory("vector")
add_subdirectory("version")

add_subdirectory("experimental/freertos")
add_subdirectory("experimental/net")
add_subdirectory("experimental/stm32")
